#!/usr/bin/env ruby
#
# Capa - Capa: AUCSS Personal Assistant
# Licensed under GPLv3 - Check the file LICENSE for more information.
#

# Some global variables
$version	= -1.0;
$name		= "Capa";

# Set consistent working directory (the same directory as the file, regardless of where we run the script from)
Dir.chdir(__dir__);

# Require everything from our source folder
Dir["./src/*.*"].each {
	|file| require file
}

# init the console (log level can be set by passing the number as a parameter here)
$console=Console.new(0);

def verbose(level=-50)
	$console.level+=level;
	$console.log("Verbosity set to #{$console.level}");
end

# DEBUG: check if the first argument is -V (for BE VERBOSE DARNIT)
if (ARGV[0]=="-V")
	ARGV.shift();
	verbose(-1000);
end

def getCommandsFromARGV()
	# Parse through command line arguments and create a command list
	# We do this in reverse because it makes more sense, bear with me.
	clist=[];

	# Here are the aliases which map to specific capa commands
	aliases = {
		"h":"help",
		"r":"run",
		"v":"verbose",
		"V":"verbose"
	};

	$console.debug("Reading commands from arguments");

	cmdline=ARGV.reverse;

	args=[];
	cmdline.each_with_index do|a,i|
		if (a[0]=="-")
			# Capa now handles command line commands a bit smarter.
			# If you use a single dash, you can combine commands together.
			# Only the last command gets the arguments.
			#
			# For example, 'capa -vr time' will run time verbosely.
			# 'capa -vvvv' will set the verbosity level to 4 times as verbose.
			#
			if (a[1]=="-")
				if (a[2]=="-")
					# Syntax error, --- and so on is not supported
					$console.error("Syntax error: #{a}");
				else
					# Command as strict '--command'
					$console.dump("#{a} is a doubledash (strict) command.");
					command=a[2..-1]; # remove the dashes
					
					# push the command to the command list
					clist.push({
						command:command,
						args:args
					});
				end
			else
				# split the rest and loop through, left to right, running the last one with arguments
				$console.dump("#{a} is a single dash (lousy) command.");
				aliaslist=a[1..-1].split(//);

				# Create a temporary command list for these commands - we need to reverse this in the end
				_clist=[];

				$console.dump("#{aliases}");
				aliaslist.each_with_index	do |a,i|
					# For each single-letter alias
					if (aliases.key? a.to_sym)
						command=aliases[a.to_sym]; # get the command we need to run

						# we don't use 'args' as it belongs to the last alias
						_args=[];

						if (i==aliaslist.size-1)
							# If this is the last alias
							$console.dump("Last alias: #{a[-1]}");
							_args=args.reverse; # reverse the arguments to get the original order
						end

						$console.debug("Pushing command '#{command}' with args #{_args} to command list");
						# Push it to the command list!
						_clist.push({
							command:command,
							args:_args
						});
					else
						# Command starts with '-', not a key, thus it's an unknown command.
						$console.warn("Unknown command '#{a}'!")
					end
				end

				# Reverse the command list and push it to the actual command list
				clist.push(*_clist.reverse);
			end
			args=[];
		else
			$console.debug("Gathering #{a} to argument list");
			args.push(a);
		end

		if (i == cmdline.size-1)
			# We're doing our last loop
			# Check if there are some lone arguments without a command.
			# E.g. 'capa time +2h', we'd have ["+2h","time"] in our arguments.
			# Interpret these as arguments to the command 'run'.
			# This way we can say 'capa time' and still run time, it makes sense.
			if not args.empty?
				args=args.reverse; # reverse the arguments to get the original order
				$console.debug("Last command RUN with #{args} to command list");
				clist.push({
					command:"run",
					args:args
				});

				args=[];
			end
		end
	end

	# And now we reverse the whole command list to get the right order.
	return clist.reverse;
end

# It's time to get some commands to run!
commandlist=[];
commandlist.push(*getCommandsFromARGV()); # Get all the commands from our arguments

# Run the commands in our list, in order, of course!
commandlist.each do|a|
	$console.debug("Running command '#{a}' from command list");
	$console.dump("send(#{a[:command]},*a[:args])");
	send(a[:command],*a[:args]);
end
